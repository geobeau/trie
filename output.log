   Compiling trie v0.1.0 (/Users/g.beausire/repo/geobeau/trie)
error[E0507]: cannot move out of an `Rc`
   --> src/main.rs:43:14
    |
43  |         Some(last.unwrap().into_inner())
    |              ^^^^^^^^^^^^^ ------------ value moved due to this method call
    |              |
    |              move occurs because value has type `RefCell<Node>`, which does not implement the `Copy` trait
    |
note: `RefCell::<T>::into_inner` takes ownership of the receiver `self`, which moves value
   --> /Users/g.beausire/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/cell.rs:843:29
    |
843 |     pub const fn into_inner(self) -> T {
    |                             ^^^^
help: you could `clone` the value and consume it, if the `Node: Clone` trait bound could be satisfied
    |
43  |         Some(<RefCell<Node> as Clone>::clone(&last.unwrap()).into_inner())
    |              +++++++++++++++++++++++++++++++++             +
help: consider annotating `Node` with `#[derive(Clone)]`
    |
6   + #[derive(Clone)]
7   | struct Node {
    |

warning: unused variable: `value`
  --> src/main.rs:54:30
   |
54 |     pub fn insert(&mut self, value: &[u8]) {
   |                              ^^^^^ help: if this is intentional, prefix it with an underscore: `_value`
   |
   = note: `#[warn(unused_variables)]` on by default

error[E0596]: cannot borrow `patricia` as mutable, as it is not declared as mutable
  --> src/main.rs:88:9
   |
88 |     let patricia = Patricia::new();
   |         ^^^^^^^^ not mutable
89 |     patricia.insert(data1);
   |     -------- cannot borrow as mutable
90 |     patricia.insert(data2);
   |     -------- cannot borrow as mutable
91 |     patricia.insert(data3);
   |     -------- cannot borrow as mutable
   |
help: consider changing this to be mutable
   |
88 |     let mut patricia = Patricia::new();
   |         +++

error[E0382]: use of moved value: `data1`
  --> src/main.rs:93:29
   |
84 |     let data1 = vec![10u8; 3];
   |         ----- move occurs because `data1` has type `Vec<u8>`, which does not implement the `Copy` trait
...
89 |     patricia.insert(data1);
   |                     ----- value moved here
...
93 |     assert!(patricia.exists(data1));
   |                             ^^^^^ value used here after move
   |
note: consider changing this parameter type in method `insert` to borrow instead if owning the value isn't necessary
  --> src/main.rs:71:37
   |
71 |     pub fn insert(&mut self, value: Vec<u8>) {
   |            ------ in this method    ^^^^^^^ this parameter takes ownership of the value
help: consider cloning the value if the performance cost is acceptable
   |
89 |     patricia.insert(data1.clone());
   |                          ++++++++

Some errors have detailed explanations: E0382, E0507, E0596.
For more information about an error, try `rustc --explain E0382`.
warning: `trie` (bin "trie") generated 1 warning
error: could not compile `trie` (bin "trie") due to 3 previous errors; 1 warning emitted
